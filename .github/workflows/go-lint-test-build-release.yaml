name: Go autobuild and release CI

on:
  push:
    tags:
      - 'v*'

jobs:
  lint:
    name: Lint files
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.21
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
        cache: false

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        # Require: The version of golangci-lint to use.
        # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
        # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
        version: v1.55
        args: --timeout=30m

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Set up Go 1.21
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
        cache: false

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: Test
      run: go test -v ./...

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set output
      id: vars
      run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

    - name: Create Release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: |
        tag="${{ steps.vars.outputs.tag }}"
        body="$(git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an <%ae>' --no-merges)"
        gh release create --draft "$tag" --title "$tag" --notes "$body"

  build:
    name: Build the binaries and upload them
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        # List of GOOS and GOARCH pairs from `go tool dist list`
        goosarch:
          - 'linux/amd64'
          - 'linux/arm64'
          - 'darwin/amd64'
          - 'darwin/arm64'
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set output
      id: vars
      run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

    - name: Set up Go 1.21
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
        cache: false

    - name: Get OS and arch info
      run: |
        GOOSARCH=${{matrix.goosarch}}
        GOOS=${GOOSARCH%/*}
        GOARCH=${GOOSARCH#*/}
        BINARY_NAME=${{github.repository}}-$GOOS-$GOARCH
        echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
        echo "GOOS=$GOOS" >> $GITHUB_ENV
        echo "GOARCH=$GOARCH" >> $GITHUB_ENV

    - name: Build
      run: |
        CGO_ENABLED=0 go build -o "$BINARY_NAME" -v

    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        tag="${{ steps.vars.outputs.tag }}"
        gh release upload "$tag" ${{env.BINARY_NAME}}
